import os
import json
import requests
import sys
import time
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options

load_dotenv()

def create_product_metadata(product_name, price):
    GUMROAD_API = "https://api.gumroad.com/v2/products"
    ACCESS_TOKEN = os.getenv("GUMROAD_ACCESS_TOKEN")

    if not ACCESS_TOKEN:
        print("‚ùå [Uploader] GUMROAD_ACCESS_TOKEN not found in .env!")
        return None

    print(f"üåê [Gumroad] Creating product metadata...")
    data = {
        "access_token": ACCESS_TOKEN,
        "name": product_name,
        "description": f"Auto-generated by IdeaReactor based on digital trend research.",
        "price": int(float(price) * 100),
        "published": False
    }

    response = requests.post(GUMROAD_API, data=data)
    result = response.json()

    if response.status_code == 200 and result.get("success"):
        product = result["product"]
        product_id = product.get("id", "unknown")
        edit_url = f"https://gumroad.com/products/{product_id}/edit"
        print(f"‚úÖ [Created] Product edit URL: {edit_url}")
        return edit_url
    else:
        print("‚ùå [Metadata Upload Failed] Gumroad said:")
        print(json.dumps(result, indent=2))
        return None

def upload_zip_with_selenium(edit_url, product_name):
    email = os.getenv("GUMROAD_EMAIL")
    password = os.getenv("GUMROAD_PASSWORD")
    zip_path = os.path.join("products", product_name, f"{product_name}.zip")

    if not os.path.exists(zip_path):
        print("‚ùå ZIP file not found!")
        return

    print("üëÅÔ∏è [Selenium] Launching headless Chrome...")
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--window-size=1920,1080")

    driver = webdriver.Chrome(options=options)

    try:
        print("üîê [Login] Navigating to Gumroad login page...")
        driver.get("https://gumroad.com/login")
        time.sleep(3)

        driver.find_element(By.ID, "user_email").send_keys(email)
        password_field = driver.find_element(By.ID, "user_password")
        password_field.send_keys(password)
        password_field.send_keys(Keys.RETURN)
        time.sleep(5)

        print(f"üß≠ [Navigate] Going to edit page: {edit_url}")
        driver.get(edit_url)
        time.sleep(5)

        print("üìé [Upload] Finding file input...")
        file_input = driver.find_element(By.XPATH, "//input[@type='file']")
        file_input.send_keys(os.path.abspath(zip_path))
        print("üì§ [Upload] ZIP submitted")

        print("‚è≥ [Wait] Waiting for upload to complete (15s)...")
        time.sleep(15)

        print("‚úÖ [Done] Upload complete")

    except Exception as e:
        print(f"‚ùå [Selenium Error] {e}")
    finally:
        driver.quit()

def upload_product(product_name):
    price_path = os.path.join("products", product_name, "price.txt")

    if not os.path.exists(price_path):
        print(f"‚ùå [Upload Error] Price file missing: {price_path}")
        return

    with open(price_path, "r") as f:
        price = f.read().strip().replace("$", "")

    edit_url = create_product_metadata(product_name, price)
    if edit_url:
        upload_zip_with_selenium(edit_url, product_name)

        # Save metadata for later
        product_data = {"edit_url": edit_url}
        out_path = os.path.join("products", product_name, "product_url.json")
        with open(out_path, "w") as f:
            json.dump(product_data, f, indent=2)
        print(f"üíæ [Saved] product_url.json written to: {out_path}")
    else:
        print("‚ùå [Error] Could not get edit URL")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‚ùå Usage: python product_uploader.py <product_name>")
        sys.exit(1)

    upload_product(sys.argv[1])

